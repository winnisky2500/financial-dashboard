import React, { useState, useEffect, useRef } from 'react';
import { 
  FileText, Upload, Download, Save, Settings, Eye, Edit3, RefreshCw, 
  ChevronRight, FolderOpen, File, Trash2, Plus, X, Check, 
  AlertCircle, Sparkles, Calendar, Clock, User, Tag, Layers,
  Monitor, Smartphone, Code, Image, Type
} from 'lucide-react';
import { 
  generateIntelligentReport, 
  uploadTemplate, 
  listTemplates, 
  getTemplate, 
  deleteTemplate, 
  updateTemplate,
  exportDocument,
  getReportTypes,
  type ReportGenerationParams, 
  type ReportGenerationResult,
  type TemplateInfo,
  type DocumentExportParams
} from '@/lib/dataService';
import { Markdown } from '@/components/ui/Markdown';
import toast from 'react-hot-toast';

const Reports: React.FC = () => {
  // 主要状态
  const [selectedReportType, setSelectedReportType] = useState<string>('');
  const [selectedTemplate, setSelectedTemplate] = useState<TemplateInfo | null>(null);
  const [reportContent, setReportContent] = useState<string>('');
  const [generatedReport, setGeneratedReport] = useState<ReportGenerationResult | null>(null);
  
  // 界面状态
  const [currentView, setCurrentView] = useState<'setup' | 'editor' | 'preview'>('setup');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  
  // 模板相关状态
  const [templates, setTemplates] = useState<TemplateInfo[]>([]);
  const [isUploadingTemplate, setIsUploadingTemplate] = useState(false);
  const [showTemplateUpload, setShowTemplateUpload] = useState(false);
  
  // 表单状态
  const [reportParams, setReportParams] = useState<ReportGenerationParams>({
    reportType: '',
    dataRange: '',
    language: 'zh-CN',
    customRequirements: '',
    parameters: {}
  });
  
  // 引用
  const fileInputRef = useRef<HTMLInputElement>(null);
  const editorRef = useRef<HTMLTextAreaElement>(null);
  
  // 获取报告类型和模板
  const reportTypes = getReportTypes();
  
  useEffect(() => {
    loadTemplates();
  }, []);
  
  const loadTemplates = async () => {
    try {
      const templateList = await listTemplates();
      setTemplates(templateList);
    } catch (error) {
      console.error('加载模板列表失败:', error);
    }
  };
  
  const handleReportTypeSelect = (reportType: any) => {
    setSelectedReportType(reportType.id);
    setReportParams(prev => ({
      ...prev,
      reportType: reportType.id
    }));
  };
  
  const handleTemplateSelect = async (template: TemplateInfo) => {
    try {
      if (!template.content) {
        const fullTemplate = await getTemplate(template.templateId);
        setSelectedTemplate(fullTemplate);
        if (fullTemplate.content) {
          setReportContent(fullTemplate.content);
        }
      } else {
        setSelectedTemplate(template);
        setReportContent(template.content);
      }
    } catch (error) {
      console.error('获取模板内容失败:', error);
      toast.error('获取模板内容失败');
    }
  };
  
  const handleTemplateUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    setIsUploadingTemplate(true);
    
    try {
      const content = await file.text();
      const templateInfo = await uploadTemplate({
        fileName: file.name,
        content: content,
        metadata: {
          uploadedAt: new Date().toISOString(),
          originalName: file.name
        }
      }, selectedReportType || 'general');
      
      toast.success('模板上传成功');
      await loadTemplates();
      setShowTemplateUpload(false);
      
    } catch (error) {
      console.error('模板上传失败:', error);
      toast.error('模板上传失败');
    } finally {
      setIsUploadingTemplate(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };
  
  const handleGenerateReport = async () => {
    if (!selectedReportType) {
      toast.error('请先选择报告类型');
      return;
    }
    
    setIsGenerating(true);
    
    try {
      const params: ReportGenerationParams = {
        ...reportParams,
        reportType: selectedReportType,
        templateStructure: selectedTemplate?.content || undefined
      };
      
      const result = await generateIntelligentReport(params);
      setGeneratedReport(result);
      setReportContent(result.content);
      setCurrentView('editor');
      toast.success('报告生成成功');
      
    } catch (error) {
      console.error('报告生成失败:', error);
      toast.error('报告生成失败');
    } finally {
      setIsGenerating(false);
    }
  };
  
  const handleExport = async (format: string) => {
    if (!reportContent) {
      toast.error('没有可导出的内容');
      return;
    }
    
    setIsExporting(true);
    
    try {
      const exportParams: DocumentExportParams = {
        content: reportContent,
        format: format as any,
        fileName: `report-${Date.now()}`,
        metadata: {
          title: reportTypes.find(rt => rt.id === selectedReportType)?.name || '财务报告',
          author: 'AI报告生成系统',
          createdAt: new Date().toISOString()
        },
        options: {
          isMarkdown: true,
          reportType: reportTypes.find(rt => rt.id === selectedReportType)?.name
        }
      };
      
      const result = await exportDocument(exportParams);
      
      // 下载文件
      const link = document.createElement('a');
      link.href = result.downloadUrl;
      link.download = result.fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast.success(`${format.toUpperCase()}导出成功`);
      
    } catch (error) {
      console.error('导出失败:', error);
      toast.error('导出失败');
    } finally {
      setIsExporting(false);
    }
  };
  
  const handleDeleteTemplate = async (templateId: string) => {
    try {
      await deleteTemplate(templateId);
      toast.success('模板删除成功');
      await loadTemplates();
      if (selectedTemplate?.templateId === templateId) {
        setSelectedTemplate(null);
      }
    } catch (error) {
      console.error('删除模板失败:', error);
      toast.error('删除模板失败');
    }
  };
  
  function renderCurrentView() {
    switch (currentView) {
      case 'setup':
        return renderSetupView();
      case 'editor':
        return renderEditorView();
      case 'preview':
        return renderPreviewView();
      default:
        return renderSetupView();
    }
  }
  
  function renderSetupView() {
    return (
      <div className="flex w-full">
        {/* 左侧面板 - 报告类型选择 */}
        <div className="w-1/3 bg-slate-800/30 backdrop-blur-sm border-r border-slate-700/50 p-6">
          <h2 className="text-xl font-semibold text-white mb-6 flex items-center space-x-2">
            <Tag className="w-5 h-5 text-blue-400" />
            <span>报告类型</span>
          </h2>
          
          <div className="space-y-3">
            {reportTypes.map((reportType) => (
              <div
                key={reportType.id}
                onClick={() => handleReportTypeSelect(reportType)}
                className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                  selectedReportType === reportType.id
                    ? 'border-blue-500 bg-blue-500/10'
                    : 'border-slate-700/50 bg-slate-700/20 hover:border-slate-600 hover:bg-slate-700/30'
                }`}
              >
                <div className="flex items-start justify-between mb-2">
                  <h3 className={`font-semibold ${
                    selectedReportType === reportType.id ? 'text-blue-300' : 'text-white'
                  }`}>
                    {reportType.name}
                  </h3>
                  <span className={`px-2 py-1 rounded text-xs font-medium bg-${reportType.color}-500/20 text-${reportType.color}-400`}>
                    {reportType.sections}章节
                  </span>
                </div>
                <p className="text-slate-400 text-sm mb-3">
                  {reportType.description}
                </p>
                <div className="flex items-center space-x-4 text-xs text-slate-500">
                  <span className="flex items-center space-x-1">
                    <FileText className="w-3 h-3" />
                    <span>{reportType.estimatedPages}页</span>
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* 中间面板 - 参数配置 */}
        <div className="flex-1 p-6 overflow-y-auto">
          <h2 className="text-xl font-semibold text-white mb-6 flex items-center space-x-2">
            <Settings className="w-5 h-5 text-emerald-400" />
            <span>生成配置</span>
          </h2>
          
          {selectedReportType ? (
            <div className="space-y-6">
              {/* 数据期间 */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  数据期间
                </label>
                <div className="flex items-center space-x-2">
                  <Calendar className="w-5 h-5 text-slate-400" />
                  <input
                    type="text"
                    value={reportParams.dataRange}
                    onChange={(e) => setReportParams(prev => ({ ...prev, dataRange: e.target.value }))}
                    placeholder="例如：2024年Q3、2024年1-9月"
                    className="flex-1 bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                  />
                </div>
              </div>
              
              {/* 语言选择 */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  报告语言
                </label>
                <select
                  value={reportParams.language}
                  onChange={(e) => setReportParams(prev => ({ ...prev, language: e.target.value }))}
                  className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white focus:border-blue-500 focus:outline-none"
                >
                  <option value="zh-CN">中文（简体）</option>
                  <option value="en-US">English</option>
                </select>
              </div>
              
              {/* 特殊要求 */}
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  特殊要求（可选）
                </label>
                <textarea
                  value={reportParams.customRequirements}
                  onChange={(e) => setReportParams(prev => ({ ...prev, customRequirements: e.target.value }))}
                  placeholder="请描述任何特殊要求或关注点..."
                  rows={3}
                  className="w-full bg-slate-700/50 border border-slate-600 rounded-lg px-3 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none resize-none"
                />
              </div>
              
              {/* 生成按钮 */}
              <div className="pt-4">
                <button
                  onClick={handleGenerateReport}
                  disabled={isGenerating}
                  className="w-full bg-gradient-to-r from-blue-500 to-emerald-500 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-600 hover:to-emerald-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center justify-center space-x-2"
                >
                  {isGenerating ? (
                    <>
                      <RefreshCw className="w-5 h-5 animate-spin" />
                      <span>生成中...</span>
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-5 h-5" />
                      <span>智能生成报告</span>
                    </>
                  )}
                </button>
              </div>
            </div>
          ) : (
            <div className="text-center py-12">
              <AlertCircle className="w-12 h-12 text-slate-500 mx-auto mb-4" />
              <p className="text-slate-400">请先选择报告类型</p>
            </div>
          )}
        </div>
        
        {/* 右侧面板 - 模板管理 */}
        <div className="w-1/3 bg-slate-800/30 backdrop-blur-sm border-l border-slate-700/50 p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold text-white flex items-center space-x-2">
              <FolderOpen className="w-5 h-5 text-purple-400" />
              <span>模板库</span>
            </h2>
            <button
              onClick={() => setShowTemplateUpload(true)}
              className="p-2 bg-purple-500/20 text-purple-400 rounded-lg hover:bg-purple-500/30 transition-colors"
              title="上传模板"
            >
              <Plus className="w-4 h-4" />
            </button>
          </div>
          
          <div className="space-y-3 max-h-[calc(100vh-16rem)] overflow-y-auto">
            {templates.length > 0 ? templates.map((template) => (
              <div
                key={template.templateId}
                className={`p-3 rounded-lg border cursor-pointer transition-all ${
                  selectedTemplate?.templateId === template.templateId
                    ? 'border-purple-500 bg-purple-500/10'
                    : 'border-slate-700/50 bg-slate-700/20 hover:border-slate-600 hover:bg-slate-700/30'
                }`}
                onClick={() => handleTemplateSelect(template)}
              >
                <div className="flex items-start justify-between mb-2">
                  <div className="flex-1">
                    <h4 className={`font-medium text-sm ${
                      selectedTemplate?.templateId === template.templateId ? 'text-purple-300' : 'text-white'
                    }`}>
                      {template.fileName}
                    </h4>
                    <p className="text-xs text-slate-500 mt-1">
                      {template.templateType} • {template.fileType?.toUpperCase()}
                    </p>
                  </div>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteTemplate(template.templateId);
                    }}
                    className="text-slate-500 hover:text-red-400 transition-colors"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
                
                {template.structure && (
                  <div className="mt-2">
                    {template.structure.sections.length > 0 && (
                      <div className="flex items-center space-x-1 mb-1">
                        <Layers className="w-3 h-3 text-slate-500" />
                        <span className="text-xs text-slate-500">
                          {template.structure.sections.length}个章节
                        </span>
                      </div>
                    )}
                    {template.structure.variables.length > 0 && (
                      <div className="flex items-center space-x-1">
                        <Type className="w-3 h-3 text-slate-500" />
                        <span className="text-xs text-slate-500">
                          {template.structure.variables.length}个变量
                        </span>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )) : (
              <div className="text-center py-8">
                <FolderOpen className="w-12 h-12 text-slate-600 mx-auto mb-3" />
                <p className="text-slate-500 text-sm">暂无模板</p>
                <button
                  onClick={() => setShowTemplateUpload(true)}
                  className="mt-2 text-purple-400 hover:text-purple-300 text-sm underline"
                >
                  上传第一个模板
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
  
  function renderEditorView() {
    return (
      <div className="flex w-full">
        {/* 编辑器 */}
        <div className="flex-1 flex flex-col">
          <div className="bg-slate-800/30 backdrop-blur-sm border-b border-slate-700/50 px-6 py-3">
            <h2 className="text-lg font-semibold text-white flex items-center space-x-2">
              <Edit3 className="w-5 h-5 text-emerald-400" />
              <span>报告编辑器</span>
            </h2>
          </div>
          
          <div className="flex-1 p-6">
            <textarea
              ref={editorRef}
              value={reportContent}
              onChange={(e) => setReportContent(e.target.value)}
              className="w-full h-full bg-slate-900/50 border border-slate-700 rounded-lg p-4 text-white font-mono text-sm resize-none focus:border-blue-500 focus:outline-none"
              placeholder="开始编辑您的报告内容..."
            />
          </div>
        </div>
        
        {/* 实时预览 */}
        <div className="w-1/2 flex flex-col border-l border-slate-700/50">
          <div className="bg-slate-800/30 backdrop-blur-sm border-b border-slate-700/50 px-6 py-3">
            <h2 className="text-lg font-semibold text-white flex items-center space-x-2">
              <Eye className="w-5 h-5 text-blue-400" />
              <span>实时预览</span>
            </h2>
          </div>
          
          <div className="flex-1 p-6 overflow-y-auto">
            <div className="bg-white rounded-lg p-6 min-h-full">
              {reportContent ? (
                <div className="prose prose-slate max-w-none">
                  <Markdown content={reportContent} />
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <FileText className="w-12 h-12 mx-auto mb-4" />
                  <p>开始编辑以查看预览</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  function renderPreviewView() {
    return (
      <div className="w-full flex flex-col">
        <div className="bg-slate-800/30 backdrop-blur-sm border-b border-slate-700/50 px-6 py-3">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-white flex items-center space-x-2">
              <Eye className="w-5 h-5 text-blue-400" />
              <span>报告预览</span>
            </h2>
            
            <div className="flex items-center space-x-3">
              <div className="text-sm text-slate-400">
                {generatedReport && (
                  <span className="flex items-center space-x-1">
                    <Clock className="w-4 h-4" />
                    <span>生成于 {new Date(generatedReport.generatedAt).toLocaleString()}</span>
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex-1 p-6 overflow-y-auto">
          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-lg shadow-2xl p-8 min-h-full">
              {reportContent ? (
                <div className="prose prose-slate prose-lg max-w-none">
                  <Markdown content={reportContent} />
                </div>
              ) : (
                <div className="text-center py-16 text-gray-500">
                  <FileText className="w-16 h-16 mx-auto mb-6" />
                  <h3 className="text-xl font-semibold mb-2">暂无内容</h3>
                  <p>请先生成或编辑报告内容</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      {/* 顶部操作栏 */}
      <div className="bg-slate-800/50 backdrop-blur-sm border-b border-slate-700/50 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center">
                <FileText className="w-6 h-6 text-blue-400" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-white">智能报告生成器</h1>
                <p className="text-slate-400 text-sm">AI驱动的专业财务报告生成平台</p>
              </div>
            </div>
            
            {/* 步骤指示器 */}
            <div className="hidden md:flex items-center space-x-2 ml-8">
              {[
                { key: 'setup', label: '配置', icon: Settings },
                { key: 'editor', label: '编辑', icon: Edit3 },
                { key: 'preview', label: '预览', icon: Eye }
              ].map((step, index) => {
                const Icon = step.icon;
                const isActive = currentView === step.key;
                const isCompleted = ['setup', 'editor'].indexOf(step.key) < ['setup', 'editor'].indexOf(currentView);
                
                return (
                  <React.Fragment key={step.key}>
                    <div className={`flex items-center space-x-2 px-3 py-1.5 rounded-lg ${
                      isActive ? 'bg-blue-500/20 text-blue-400' : 
                      isCompleted ? 'text-green-400' : 'text-slate-500'
                    }`}>
                      <Icon className="w-4 h-4" />
                      <span className="text-sm font-medium">{step.label}</span>
                      {isCompleted && <Check className="w-4 h-4" />}
                    </div>
                    {index < 2 && <ChevronRight className="w-4 h-4 text-slate-600" />}
                  </React.Fragment>
                );
              })}
            </div>
          </div>
          
          {/* 操作按钮 */}
          <div className="flex items-center space-x-3">
            {currentView !== 'setup' && (
              <>
                <button
                  onClick={() => setCurrentView('editor')}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                    currentView === 'editor' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50'
                  }`}
                >
                  编辑
                </button>
                <button
                  onClick={() => setCurrentView('preview')}
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                    currentView === 'preview' 
                      ? 'bg-blue-500 text-white' 
                      : 'bg-slate-700/50 text-slate-300 hover:bg-slate-600/50'
                  }`}
                >
                  预览
                </button>
                
                {/* 导出下拉菜单 */}
                <div className="relative group">
                  <button
                    disabled={isExporting || !reportContent}
                    className="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                  >
                    <Download className="w-4 h-4" />
                    <span>导出</span>
                  </button>
                  
                  {reportContent && (
                    <div className="absolute right-0 top-full mt-2 w-48 bg-slate-800 border border-slate-700 rounded-lg shadow-xl opacity-0 group-hover:opacity-100 transition-opacity z-50">
                      {[
                        { format: 'pdf', label: 'PDF文档', icon: FileText },
                        { format: 'docx', label: 'Word文档', icon: File },
                        { format: 'md', label: 'Markdown', icon: Code },
                        { format: 'html', label: 'HTML页面', icon: Monitor }
                      ].map(({ format, label, icon: Icon }) => (
                        <button
                          key={format}
                          onClick={() => handleExport(format)}
                          disabled={isExporting}
                          className="w-full px-4 py-2 text-left text-sm text-slate-300 hover:text-white hover:bg-slate-700/50 first:rounded-t-lg last:rounded-b-lg transition-colors flex items-center space-x-2 disabled:opacity-50"
                        >
                          <Icon className="w-4 h-4" />
                          <span>{label}</span>
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              </>
            )}
          </div>
        </div>
      </div>
      
      {/* 主要内容区域 */}
      <div className="flex h-[calc(100vh-5rem)]">
        {renderCurrentView()}
      </div>
      
      {/* 模板上传弹窗 */}
      {showTemplateUpload && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-slate-800 border border-slate-700 rounded-xl p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">上传模板</h3>
              <button
                onClick={() => setShowTemplateUpload(false)}
                className="text-slate-400 hover:text-white"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-300 mb-2">
                  选择文件
                </label>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".md,.txt,.html,.docx"
                  onChange={handleTemplateUpload}
                  disabled={isUploadingTemplate}
                  className="block w-full text-sm text-slate-300 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-500 file:text-white hover:file:bg-blue-600 file:transition-colors"
                />
                <p className="mt-1 text-xs text-slate-500">
                  支持 .md, .txt, .html, .docx 格式
                </p>
              </div>
              
              {isUploadingTemplate && (
                <div className="flex items-center space-x-2 text-blue-400">
                  <RefreshCw className="w-4 h-4 animate-spin" />
                  <span className="text-sm">上传中...</span>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;